// build/reflexer.yy.cpp generated by reflex 5.1.0 from src/reflexer.ll

#define REFLEX_VERSION "5.1.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               yyFlexLexer
#define REFLEX_OPTION_outfile             "build/reflexer.yy.cpp"
#define REFLEX_OPTION_prefix              yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define YY_NUM_RULES (87)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE ABSTRACT LEXER CLASS                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/flexlexer.h>
typedef reflex::FlexLexer<reflex::Matcher> FlexLexer;

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class yyFlexLexer : public FlexLexer {
 public:
  yyFlexLexer(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, NULL means std::cout by default
      std::ostream *os = NULL)
    :
      FlexLexer(input, os)
  {
  }
  // the flex lexer function defined by SECTION 2
  virtual int yylex(void);
  // lexer functions accepting new input to scan
  int yylex(const reflex::Input& input)
  {
    in(input);
    return yylex();
  }
  int yylex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return yylex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "src/reflexer.ll"


//      The basic source character set consists of 96 characters:
//      the space character, the control characters representing horizontal tab,
//      vertical tab, form feed, and new-line, plus the following 91 graphical characters
//
//      a b c d e f g h i j k l m n o p q r s t u v w x y z
//      A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
//      0 1 2 3 4 5 6 7 8 9
//      _ { } [ ] # ( ) < > % : ; . ? * + - / ˆ & | ˜ ! = , \ " ’

#include "parser.tab.h"
#include <string.h>



////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int yyFlexLexer::yylex(void)
{
  static const char *REGEX_INITIAL = "(?m)((?:\\Qint\\E))|((?:\\Qfloat\\E))|((?:\\Qchar\\E))|((?:\\Qreturn\\E))|((?:\\Qif\\E))|((?:\\Qelse\\E))|((?:\\Qdo\\E))|((?:\\Qwhile\\E))|((?:\\Qfor\\E))|((?:\\Qcontinue\\E))|((?:\\Qswitch\\E))|((?:\\Qcase\\E))|((?:\\Qbreak\\E))|((?:\\Qgoto\\E))|((?:\\Qdefault\\E))|((?:\\Qvoid\\E))|((?:\\Qprivate\\E))|((?:\\Qprotected\\E))|((?:\\Qpublic\\E))|((?:\\Qinline\\E))|((?:\\Qstatic\\E))|((?:\\Qconst\\E))|((?:\\Qunsigned\\E))|((?:\\Qvolatile\\E))|((?:\\Qregister\\E))|((?:\\Qrestrict\\E))|((?:\\Q#include\\E))|((?:\\Q#define\\E))|((?:\\Q#ifdef\\E))|((?:\\Q#ifndef\\E))|((?:\\Q#endif\\E))|((?:\\Q=\\E))|((?:\\Q;\\E))|((?:\\Q+\\E))|((?:\\Q-\\E))|((?:\\Q,\\E))|((?:\\Q(\\E))|((?:\\Q)\\E))|((?:\\Q{\\E))|((?:\\Q}\\E))|((?:\\Q[\\E))|((?:\\Q]\\E))|((?:\\Q<\\E))|((?:\\Q>\\E))|((?:\\Q#\\E))|((?:\\Q$\\E))|((?:\\Q%\\E))|((?:\\Q^\\E))|((?:\\Q\"\\E))|((?:\\Q'\\E))|((?:\\Q/\\E))|((?:\\Q~\\E))|((?:\\Q_\\E))|((?:\\Q:\\E))|((?:\\Q&\\E))|((?:\\Q*\\E))|((?:\\Q::\\E))|((?:\\Q.\\E))|((?:\\Q->\\E))|((?:\\Q.*\\E))|((?:\\Q->*\\E))|((?:\\Q!\\E))|((?:\\Q==\\E))|((?:\\Q&&\\E))|((?:\\Q||\\E))|((?:\\Q<<\\E))|((?:\\Q>>\\E))|((?:\\Q++\\E))|((?:\\Q--\\E))|((?:\\Q+=\\E))|((?:\\Q-=\\E))|((?:\\Q*=\\E))|((?:\\Q/=\\E))|((?:\\Q&=\\E))|((?:\\Q%=\\E))|((?:\\Q|=\\E))|((?:\\Q^=\\E))|((?:\\Q~=\\E))|((?:\\Q<<=\\E))|((?:\\Q>>=\\E))|((?:[/]))|(__(?:[A-Z_a-z][0-9A-Z_a-z]*))|((?:[A-Z_a-z][0-9A-Z_a-z]*))|((?:[0-9])+)|([\\x09\\x0a\\x20]+)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    YY_USER_INIT
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
#line 108 "src/reflexer.ll"
{ return END_OF_FILE; }
            }
            else
            {
              output(matcher().input());
            }
            YY_BREAK
          case 1: // rule src/reflexer.ll:23: "int" :
            YY_USER_ACTION
#line 23 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return INT; }
            YY_BREAK
          case 2: // rule src/reflexer.ll:24: "float" :
            YY_USER_ACTION
#line 24 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return FLOAT; }
            YY_BREAK
          case 3: // rule src/reflexer.ll:25: "char" :
            YY_USER_ACTION
#line 25 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return CHAR; }
            YY_BREAK
          case 4: // rule src/reflexer.ll:26: "return" :
            YY_USER_ACTION
#line 26 "src/reflexer.ll"
{ return RETURN; }
            YY_BREAK
          case 5: // rule src/reflexer.ll:27: "if" :
            YY_USER_ACTION
#line 27 "src/reflexer.ll"
{ return IF; }
            YY_BREAK
          case 6: // rule src/reflexer.ll:28: "else" :
            YY_USER_ACTION
#line 28 "src/reflexer.ll"
{ return ELSE; }
            YY_BREAK
          case 7: // rule src/reflexer.ll:29: "do" :
            YY_USER_ACTION
#line 29 "src/reflexer.ll"
{ return DO; }
            YY_BREAK
          case 8: // rule src/reflexer.ll:30: "while" :
            YY_USER_ACTION
#line 30 "src/reflexer.ll"
{ return WHILE; }
            YY_BREAK
          case 9: // rule src/reflexer.ll:31: "for" :
            YY_USER_ACTION
#line 31 "src/reflexer.ll"
{ return FOR; }
            YY_BREAK
          case 10: // rule src/reflexer.ll:32: "continue" :
            YY_USER_ACTION
#line 32 "src/reflexer.ll"
{ return CONTINUE; }
            YY_BREAK
          case 11: // rule src/reflexer.ll:33: "switch" :
            YY_USER_ACTION
#line 33 "src/reflexer.ll"
{ return SWITCH; }
            YY_BREAK
          case 12: // rule src/reflexer.ll:34: "case" :
            YY_USER_ACTION
#line 34 "src/reflexer.ll"
{ return CASE; }
            YY_BREAK
          case 13: // rule src/reflexer.ll:35: "break" :
            YY_USER_ACTION
#line 35 "src/reflexer.ll"
{ return BREAK; }
            YY_BREAK
          case 14: // rule src/reflexer.ll:36: "goto" :
            YY_USER_ACTION
#line 36 "src/reflexer.ll"
{ return GOTO; }
            YY_BREAK
          case 15: // rule src/reflexer.ll:37: "default" :
            YY_USER_ACTION
#line 37 "src/reflexer.ll"
{ return DEFAULT; }
            YY_BREAK
          case 16: // rule src/reflexer.ll:38: "void" :
            YY_USER_ACTION
#line 38 "src/reflexer.ll"
{ return VOID; }
            YY_BREAK
          case 17: // rule src/reflexer.ll:39: "private" :
            YY_USER_ACTION
#line 39 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return PRIVATE; }
            YY_BREAK
          case 18: // rule src/reflexer.ll:40: "protected" :
            YY_USER_ACTION
#line 40 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return PROTECTED; }
            YY_BREAK
          case 19: // rule src/reflexer.ll:41: "public" :
            YY_USER_ACTION
#line 41 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return PUBLIC; }
            YY_BREAK
          case 20: // rule src/reflexer.ll:42: "inline" :
            YY_USER_ACTION
#line 42 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return INLINE; }
            YY_BREAK
          case 21: // rule src/reflexer.ll:43: "static" :
            YY_USER_ACTION
#line 43 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return STATIC; }
            YY_BREAK
          case 22: // rule src/reflexer.ll:44: "const" :
            YY_USER_ACTION
#line 44 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return CONST; }
            YY_BREAK
          case 23: // rule src/reflexer.ll:45: "unsigned" :
            YY_USER_ACTION
#line 45 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return UNSIGNED; }
            YY_BREAK
          case 24: // rule src/reflexer.ll:46: "volatile" :
            YY_USER_ACTION
#line 46 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return VOLATILE; }
            YY_BREAK
          case 25: // rule src/reflexer.ll:47: "register" :
            YY_USER_ACTION
#line 47 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return REGISTER; }
            YY_BREAK
          case 26: // rule src/reflexer.ll:48: "restrict" :
            YY_USER_ACTION
#line 48 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return RESTRICT; }
            YY_BREAK
          case 27: // rule src/reflexer.ll:49: "#include" :
            YY_USER_ACTION
#line 49 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return INCLUDE; }
            YY_BREAK
          case 28: // rule src/reflexer.ll:50: "#define" :
            YY_USER_ACTION
#line 50 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return DEFINE; }
            YY_BREAK
          case 29: // rule src/reflexer.ll:51: "#ifdef" :
            YY_USER_ACTION
#line 51 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return IFDEF; }
            YY_BREAK
          case 30: // rule src/reflexer.ll:52: "#ifndef" :
            YY_USER_ACTION
#line 52 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return IFNDEF; }
            YY_BREAK
          case 31: // rule src/reflexer.ll:53: "#endif" :
            YY_USER_ACTION
#line 53 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return ENDIF; }
            YY_BREAK
          case 32: // rule src/reflexer.ll:54: "=" :
            YY_USER_ACTION
#line 54 "src/reflexer.ll"
{ return '='; }
            YY_BREAK
          case 33: // rule src/reflexer.ll:55: ";" :
            YY_USER_ACTION
#line 55 "src/reflexer.ll"
{ return ';'; }
            YY_BREAK
          case 34: // rule src/reflexer.ll:56: "+" :
            YY_USER_ACTION
#line 56 "src/reflexer.ll"
{ return '+'; }
            YY_BREAK
          case 35: // rule src/reflexer.ll:57: "-" :
            YY_USER_ACTION
#line 57 "src/reflexer.ll"
{ return '-'; }
            YY_BREAK
          case 36: // rule src/reflexer.ll:58: "," :
            YY_USER_ACTION
#line 58 "src/reflexer.ll"
{ return ','; }
            YY_BREAK
          case 37: // rule src/reflexer.ll:59: "(" :
            YY_USER_ACTION
#line 59 "src/reflexer.ll"
{ return '('; }
            YY_BREAK
          case 38: // rule src/reflexer.ll:60: ")" :
            YY_USER_ACTION
#line 60 "src/reflexer.ll"
{ return ')'; }
            YY_BREAK
          case 39: // rule src/reflexer.ll:61: "{" :
            YY_USER_ACTION
#line 61 "src/reflexer.ll"
{ return '{'; }
            YY_BREAK
          case 40: // rule src/reflexer.ll:62: "}" :
            YY_USER_ACTION
#line 62 "src/reflexer.ll"
{ return '}'; }
            YY_BREAK
          case 41: // rule src/reflexer.ll:63: "[" :
            YY_USER_ACTION
#line 63 "src/reflexer.ll"
{ return '['; }
            YY_BREAK
          case 42: // rule src/reflexer.ll:64: "]" :
            YY_USER_ACTION
#line 64 "src/reflexer.ll"
{ return ']'; }
            YY_BREAK
          case 43: // rule src/reflexer.ll:65: "<" :
            YY_USER_ACTION
#line 65 "src/reflexer.ll"
{ return '<'; }
            YY_BREAK
          case 44: // rule src/reflexer.ll:66: ">" :
            YY_USER_ACTION
#line 66 "src/reflexer.ll"
{ return '>'; }
            YY_BREAK
          case 45: // rule src/reflexer.ll:67: "#" :
            YY_USER_ACTION
#line 67 "src/reflexer.ll"
{ return '#'; }
            YY_BREAK
          case 46: // rule src/reflexer.ll:68: "$" :
            YY_USER_ACTION
#line 68 "src/reflexer.ll"
{ return '$'; }
            YY_BREAK
          case 47: // rule src/reflexer.ll:69: "%" :
            YY_USER_ACTION
#line 69 "src/reflexer.ll"
{ return '%'; }
            YY_BREAK
          case 48: // rule src/reflexer.ll:70: "^" :
            YY_USER_ACTION
#line 70 "src/reflexer.ll"
{ return '^'; }
            YY_BREAK
          case 49: // rule src/reflexer.ll:71: "\"" :
            YY_USER_ACTION
#line 71 "src/reflexer.ll"
{ return '"'; }
            YY_BREAK
          case 50: // rule src/reflexer.ll:72: "'" :
            YY_USER_ACTION
#line 72 "src/reflexer.ll"
{ return '\'';}
            YY_BREAK
          case 51: // rule src/reflexer.ll:73: "/" :
            YY_USER_ACTION
#line 73 "src/reflexer.ll"
{ return '/'; }
            YY_BREAK
          case 52: // rule src/reflexer.ll:74: "~" :
            YY_USER_ACTION
#line 74 "src/reflexer.ll"
{ return '~'; }
            YY_BREAK
          case 53: // rule src/reflexer.ll:75: "_" :
            YY_USER_ACTION
#line 75 "src/reflexer.ll"
{ return '_'; }
            YY_BREAK
          case 54: // rule src/reflexer.ll:76: ":" :
            YY_USER_ACTION
#line 76 "src/reflexer.ll"
{ return ':'; }
            YY_BREAK
          case 55: // rule src/reflexer.ll:77: "&" :
            YY_USER_ACTION
#line 77 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return REFERENCE; }
            YY_BREAK
          case 56: // rule src/reflexer.ll:78: "*" :
            YY_USER_ACTION
#line 78 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return POINTER; }
            YY_BREAK
          case 57: // rule src/reflexer.ll:79: "::" :
            YY_USER_ACTION
#line 79 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return SCOPE_RESOLUTION; }
            YY_BREAK
          case 58: // rule src/reflexer.ll:80: "." :
            YY_USER_ACTION
#line 80 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return DIRECT_MEMBER_SELECT; }
            YY_BREAK
          case 59: // rule src/reflexer.ll:81: "->" :
            YY_USER_ACTION
#line 81 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return INDIRECT_MEMBER_SELECT; }
            YY_BREAK
          case 60: // rule src/reflexer.ll:82: ".*" :
            YY_USER_ACTION
#line 82 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return INDIRECT_TO_POINTER; }
            YY_BREAK
          case 61: // rule src/reflexer.ll:83: "->*" :
            YY_USER_ACTION
#line 83 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return DIRECT_TO_POINTER; }
            YY_BREAK
          case 62: // rule src/reflexer.ll:84: "!" :
            YY_USER_ACTION
#line 84 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return LOGICAL_NOT; }
            YY_BREAK
          case 63: // rule src/reflexer.ll:85: "==" :
            YY_USER_ACTION
#line 85 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return EQUALS; }
            YY_BREAK
          case 64: // rule src/reflexer.ll:86: "&&" :
            YY_USER_ACTION
#line 86 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return LOGICAL_AND; }
            YY_BREAK
          case 65: // rule src/reflexer.ll:87: "||" :
            YY_USER_ACTION
#line 87 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return LOGICAL_OR; }
            YY_BREAK
          case 66: // rule src/reflexer.ll:88: "<<" :
            YY_USER_ACTION
#line 88 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return LSHIFT_OPERATOR; }
            YY_BREAK
          case 67: // rule src/reflexer.ll:89: ">>" :
            YY_USER_ACTION
#line 89 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return RSHIFT_OPERATOR; }
            YY_BREAK
          case 68: // rule src/reflexer.ll:90: "++" :
            YY_USER_ACTION
#line 90 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return INCREMENT_OPERATOR; }
            YY_BREAK
          case 69: // rule src/reflexer.ll:91: "--" :
            YY_USER_ACTION
#line 91 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return DECREMENT_OPERATOR; }
            YY_BREAK
          case 70: // rule src/reflexer.ll:92: "+=" :
            YY_USER_ACTION
#line 92 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return ADD_ASSIGN_OPERATOR; }
            YY_BREAK
          case 71: // rule src/reflexer.ll:93: "-=" :
            YY_USER_ACTION
#line 93 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return SUB_ASSIGN_OPERATOR; }
            YY_BREAK
          case 72: // rule src/reflexer.ll:94: "*=" :
            YY_USER_ACTION
#line 94 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return MULT_ASSIGN_OPERATOR; }
            YY_BREAK
          case 73: // rule src/reflexer.ll:95: "/=" :
            YY_USER_ACTION
#line 95 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return DIV_ASSIGN_OPERATOR; }
            YY_BREAK
          case 74: // rule src/reflexer.ll:96: "&=" :
            YY_USER_ACTION
#line 96 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return BITAND_ASSIGN_OPERATOR; }
            YY_BREAK
          case 75: // rule src/reflexer.ll:97: "%=" :
            YY_USER_ACTION
#line 97 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return MOD_ASSIGN_OPERATOR; }
            YY_BREAK
          case 76: // rule src/reflexer.ll:98: "|=" :
            YY_USER_ACTION
#line 98 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return BITOR_ASSIGN_OPERATOR; }
            YY_BREAK
          case 77: // rule src/reflexer.ll:99: "^=" :
            YY_USER_ACTION
#line 99 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return BITXOR_ASSIGN_OPERATOR; }
            YY_BREAK
          case 78: // rule src/reflexer.ll:100: "~=" :
            YY_USER_ACTION
#line 100 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return BITNOT_ASSIGN_OPERATOR; }
            YY_BREAK
          case 79: // rule src/reflexer.ll:101: "<<=" :
            YY_USER_ACTION
#line 101 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return LSHIFT_ASSIGN_OPERATOR; }
            YY_BREAK
          case 80: // rule src/reflexer.ll:102: ">>=" :
            YY_USER_ACTION
#line 102 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return RSHIFT_ASSIGN_OPERATOR; }
            YY_BREAK
          case 81: // rule src/reflexer.ll:103: {escape} :
            YY_USER_ACTION
#line 103 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return ESCAPE; }
            YY_BREAK
          case 82: // rule src/reflexer.ll:104: __{id} :
            YY_USER_ACTION
#line 104 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return ARG; }
            YY_BREAK
          case 83: // rule src/reflexer.ll:105: {id} :
            YY_USER_ACTION
#line 105 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return ID; }
            YY_BREAK
          case 84: // rule src/reflexer.ll:106: {digit}+ :
            YY_USER_ACTION
#line 106 "src/reflexer.ll"
{ yylval.str = strdup(yytext); return NUMBER; }
            YY_BREAK
          case 85: // rule src/reflexer.ll:107: [ \t\n]+ :
            YY_USER_ACTION
#line 107 "src/reflexer.ll"
; // Skip whitespace
            YY_BREAK
          case 86: // rule src/reflexer.ll:109: . :
            YY_USER_ACTION
#line 109 "src/reflexer.ll"
{ printf("Unexpected character: %s\n", yytext); }

            YY_BREAK
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 112 "src/reflexer.ll"

int yywrap(void)
{
    return 1;
}


#include "build/reflexer.yy.cpp"

int main(int argc, char* argv[]) {
    ExampleLexer lexer(std::cin);
    while (lexer.lex() != 0) {
        // lex() already handles output per rules
    }
    return 0;
}

/* int main(int argc, char* argv[])
{
    // skip exe path ...
   argc--; argv++;
   if (argc > 0)
   {
		FILE *file;
		file = fopen(argv[0], "r");
		if (!file)
        {
			fprintf(stderr,"could not open %s\n", argv[0]);
			exit(1);
		}
		yyin = file;
	}
    else
    {
        fprintf(stderr, "\nMissing filename paramter, help ->\n");
        fprintf(stderr, "lex [OPTION]... [FilE]...\n");
        fprintf(stderr, "Interactive mode...\n\n");
        yyin = stdin;
    }

    yyparse();
    return 0;
} */
