// build3/reflexer.yy.cpp generated by reflex 5.1.0 from src3/reflexer.ll

#define REFLEX_VERSION "5.1.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               yyFlexLexer
#define REFLEX_OPTION_outfile             "build3/reflexer.yy.cpp"
#define REFLEX_OPTION_prefix              yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define YY_NUM_RULES (15)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE ABSTRACT LEXER CLASS                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/flexlexer.h>
typedef reflex::FlexLexer<reflex::Matcher> FlexLexer;

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class yyFlexLexer : public FlexLexer {
 public:
  yyFlexLexer(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, NULL means std::cout by default
      std::ostream *os = NULL)
    :
      FlexLexer(input, os)
  {
  }
  // the flex lexer function defined by SECTION 2
  virtual int yylex(void);
  // lexer functions accepting new input to scan
  int yylex(const reflex::Input& input)
  {
    in(input);
    return yylex();
  }
  int yylex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return yylex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "src3/reflexer.ll"

#include "parser.tab.h"
#include <string.h>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int yyFlexLexer::yylex(void)
{
  static const char *REGEX_INITIAL = "(?m)((?:\\Qint\\E))|((?:\\Qfloat\\E))|((?:\\Qreturn\\E))|((?:[A-Z_a-z][0-9A-Z_a-z]*))|((?:[0-9])+)|((?:\\Q=\\E))|((?:\\Q;\\E))|((?:\\Q(\\E))|((?:\\Q)\\E))|((?:\\Q{\\E))|((?:\\Q}\\E))|((?:\\Q+\\E))|((?:\\Q-\\E))|([\\x09\\x0a\\x20]+)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    YY_USER_INIT
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              output(matcher().input());
            }
            YY_BREAK
          case 1: // rule src3/reflexer.ll:11: "int" :
            YY_USER_ACTION
#line 11 "src3/reflexer.ll"
{ return INT; }
            YY_BREAK
          case 2: // rule src3/reflexer.ll:12: "float" :
            YY_USER_ACTION
#line 12 "src3/reflexer.ll"
{ return FLOAT; }
            YY_BREAK
          case 3: // rule src3/reflexer.ll:13: "return" :
            YY_USER_ACTION
#line 13 "src3/reflexer.ll"
{ return RETURN; }

            YY_BREAK
          case 4: // rule src3/reflexer.ll:15: {id} :
            YY_USER_ACTION
#line 15 "src3/reflexer.ll"
{ yylval.str = strdup(yytext); return ID; }
            YY_BREAK
          case 5: // rule src3/reflexer.ll:16: {digit}+ :
            YY_USER_ACTION
#line 16 "src3/reflexer.ll"
{ yylval.num = atoi(yytext); return NUMBER; }

            YY_BREAK
          case 6: // rule src3/reflexer.ll:18: "=" :
            YY_USER_ACTION
#line 18 "src3/reflexer.ll"
{ return '='; }
            YY_BREAK
          case 7: // rule src3/reflexer.ll:19: ";" :
            YY_USER_ACTION
#line 19 "src3/reflexer.ll"
{ return ';'; }
            YY_BREAK
          case 8: // rule src3/reflexer.ll:20: "(" :
            YY_USER_ACTION
#line 20 "src3/reflexer.ll"
{ return '('; }
            YY_BREAK
          case 9: // rule src3/reflexer.ll:21: ")" :
            YY_USER_ACTION
#line 21 "src3/reflexer.ll"
{ return ')'; }
            YY_BREAK
          case 10: // rule src3/reflexer.ll:22: "{" :
            YY_USER_ACTION
#line 22 "src3/reflexer.ll"
{ return '{'; }
            YY_BREAK
          case 11: // rule src3/reflexer.ll:23: "}" :
            YY_USER_ACTION
#line 23 "src3/reflexer.ll"
{ return '}'; }
            YY_BREAK
          case 12: // rule src3/reflexer.ll:24: "+" :
            YY_USER_ACTION
#line 24 "src3/reflexer.ll"
{ return '+'; }
            YY_BREAK
          case 13: // rule src3/reflexer.ll:25: "-" :
            YY_USER_ACTION
#line 25 "src3/reflexer.ll"
{ return '-'; }
            YY_BREAK
          case 14: // rule src3/reflexer.ll:26: [ \t\n]+ :
            YY_USER_ACTION
#line 26 "src3/reflexer.ll"
; // Skip whitespace
            YY_BREAK
          case 15: // rule src3/reflexer.ll:27: . :
            YY_USER_ACTION
#line 27 "src3/reflexer.ll"
{ printf("Unexpected character: %s\n", yytext); }

            YY_BREAK
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 30 "src3/reflexer.ll"

int yywrap(void) { return 1; }

/*
int main()
{
    while (yylex() != 0) ;
    return 0;
}


int main(int argc, char** argv)
{
    if(argc > 1)
    {
        if(!(yyin = fopen(argv[1], "r")))
        {
            perror(argv[1]);
            return (1);
        }
    }
    yylex();
    return 0;
}
*/

int main(int argc, char* argv[])
{
    // #ifdef DEBUG
    // skip exe path ...
   argc--; argv++;
   if (argc > 0)
   {
		FILE *file;
		file = fopen(argv[0], "r");
		if (!file)
        {
			fprintf(stderr,"could not open %s\n", argv[0]);
			exit(1);
		}
		yyin = file;
	}
    else
    {
        fprintf(stderr, "\nMissing filename paramter, help ->\n");
        fprintf(stderr, "lex [OPTION]... [FilE]...\n");
        fprintf(stderr, "Interactive mode...\n\n");
        yyin = stdin;
    }

    yyparse();
    // #endif

    return 0;
}
