// build/slex.yy.cpp generated by reflex 5.1.0 from slex.l

#define REFLEX_VERSION "5.1.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               yyFlexLexer
#define REFLEX_OPTION_outfile             "build/slex.yy.cpp"
#define REFLEX_OPTION_prefix              yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define YY_NUM_RULES (27)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE ABSTRACT LEXER CLASS                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/flexlexer.h>
typedef reflex::FlexLexer<reflex::Matcher> FlexLexer;

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class yyFlexLexer : public FlexLexer {
 public:
  yyFlexLexer(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, NULL means std::cout by default
      std::ostream *os = NULL)
    :
      FlexLexer(input, os)
  {
  }
  // the flex lexer function defined by SECTION 2
  virtual int yylex(void);
  // lexer functions accepting new input to scan
  int yylex(const reflex::Input& input)
  {
    in(input);
    return yylex();
  }
  int yylex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return yylex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "slex.l"


//      The basic source character set consists of 96 characters:
//      the space character, the control characters representing horizontal tab,
//      vertical tab, form feed, and new-line, plus the following 91 graphical characters
//
//      a b c d e f g h i j k l m n o p q r s t u v w x y z
//      A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
//      0 1 2 3 4 5 6 7 8 9
//      _ { } [ ] # ( ) < > % : ; . ? * + - / ˆ & | ˜ ! = , \ " ’

#include <string.h>



////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int yyFlexLexer::yylex(void)
{
  static const char *REGEX_INITIAL = "(?m)((?:\\Q=\\E))|((?:\\Q;\\E))|((?:\\Q+\\E))|((?:\\Q-\\E))|((?:\\Q,\\E))|((?:\\Q(\\E))|((?:\\Q)\\E))|((?:\\Q{\\E))|((?:\\Q}\\E))|((?:\\Q[\\E))|((?:\\Q]\\E))|((?:\\Q<\\E))|((?:\\Q>\\E))|((?:\\Q#\\E))|((?:\\Q$\\E))|((?:\\Q%\\E))|((?:\\Q^\\E))|((?:\\Q\"\\E))|((?:\\Q'\\E))|((?:\\Q/\\E))|((?:\\Q~\\E))|((?:\\Q_\\E))|((?:\\Q:\\E))|((?:[0-9])+)|((?:[A-Z_a-z][0-9A-Z_a-z]*))|([\\x09\\x0a\\x20]+)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    YY_USER_INIT
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              output(matcher().input());
            }
            YY_BREAK
          case 1: // rule slex.l:21: "=" :
            YY_USER_ACTION
#line 21 "slex.l"
{ return '='; }
            YY_BREAK
          case 2: // rule slex.l:22: ";" :
            YY_USER_ACTION
#line 22 "slex.l"
{ return ';'; }
            YY_BREAK
          case 3: // rule slex.l:23: "+" :
            YY_USER_ACTION
#line 23 "slex.l"
{ return '+'; }
            YY_BREAK
          case 4: // rule slex.l:24: "-" :
            YY_USER_ACTION
#line 24 "slex.l"
{ return '-'; }
            YY_BREAK
          case 5: // rule slex.l:25: "," :
            YY_USER_ACTION
#line 25 "slex.l"
{ return ','; }
            YY_BREAK
          case 6: // rule slex.l:26: "(" :
            YY_USER_ACTION
#line 26 "slex.l"
{ return '('; }
            YY_BREAK
          case 7: // rule slex.l:27: ")" :
            YY_USER_ACTION
#line 27 "slex.l"
{ return ')'; }
            YY_BREAK
          case 8: // rule slex.l:28: "{" :
            YY_USER_ACTION
#line 28 "slex.l"
{ return '{'; }
            YY_BREAK
          case 9: // rule slex.l:29: "}" :
            YY_USER_ACTION
#line 29 "slex.l"
{ return '}'; }
            YY_BREAK
          case 10: // rule slex.l:30: "[" :
            YY_USER_ACTION
#line 30 "slex.l"
{ return '['; }
            YY_BREAK
          case 11: // rule slex.l:31: "]" :
            YY_USER_ACTION
#line 31 "slex.l"
{ return ']'; }
            YY_BREAK
          case 12: // rule slex.l:32: "<" :
            YY_USER_ACTION
#line 32 "slex.l"
{ return '<'; }
            YY_BREAK
          case 13: // rule slex.l:33: ">" :
            YY_USER_ACTION
#line 33 "slex.l"
{ return '>'; }
            YY_BREAK
          case 14: // rule slex.l:34: "#" :
            YY_USER_ACTION
#line 34 "slex.l"
{ return '#'; }
            YY_BREAK
          case 15: // rule slex.l:35: "$" :
            YY_USER_ACTION
#line 35 "slex.l"
{ return '$'; }
            YY_BREAK
          case 16: // rule slex.l:36: "%" :
            YY_USER_ACTION
#line 36 "slex.l"
{ return '%'; }
            YY_BREAK
          case 17: // rule slex.l:37: "^" :
            YY_USER_ACTION
#line 37 "slex.l"
{ return '^'; }
            YY_BREAK
          case 18: // rule slex.l:38: "\"" :
            YY_USER_ACTION
#line 38 "slex.l"
{ return '"'; }
            YY_BREAK
          case 19: // rule slex.l:39: "'" :
            YY_USER_ACTION
#line 39 "slex.l"
{ return '\''; }
            YY_BREAK
          case 20: // rule slex.l:40: "/" :
            YY_USER_ACTION
#line 40 "slex.l"
{ return '/'; }
            YY_BREAK
          case 21: // rule slex.l:41: "~" :
            YY_USER_ACTION
#line 41 "slex.l"
{ return '~'; }
            YY_BREAK
          case 22: // rule slex.l:42: "_" :
            YY_USER_ACTION
#line 42 "slex.l"
{ return '_'; }
            YY_BREAK
          case 23: // rule slex.l:43: ":" :
            YY_USER_ACTION
#line 43 "slex.l"
{ return ':'; }
            YY_BREAK
          case 24: // rule slex.l:44: {digit}+ :
            YY_USER_ACTION
#line 44 "slex.l"
{ ECHO; }
            YY_BREAK
          case 25: // rule slex.l:45: {id} :
            YY_USER_ACTION
#line 45 "slex.l"
{ ECHO; }
            YY_BREAK
          case 26: // rule slex.l:46: [ \t\n]+ :
            YY_USER_ACTION
#line 46 "slex.l"
; // Skip whitespace
            YY_BREAK
          case 27: // rule slex.l:47: . :
            YY_USER_ACTION
#line 47 "slex.l"
{ printf("Unexpected character: %s\n", yytext); }

            YY_BREAK
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 50 "slex.l"

// entry point
int main( int argc, char* argvp[] )
{
    yyFlexLexer().yylex() ; /* modified for C++ */
    return EXIT_SUCCESS ;
}
